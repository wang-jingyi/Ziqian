package io.github.wang_jingyi.ZiQian.active;

import java.util.ArrayList;
import java.util.List;

import io.github.wang_jingyi.ZiQian.run.Config;
import io.github.wang_jingyi.ZiQian.run.PlatformDependent;
import io.github.wang_jingyi.ZiQian.utils.ExternalCaller;
import io.github.wang_jingyi.ZiQian.utils.ListUtil;
import io.github.wang_jingyi.ZiQian.utils.NumberUtil;
import io.github.wang_jingyi.ZiQian.utils.PrismUtil;

public class ExtractResult {

	public static void main(String[] args) {
		
		String pmPath = PlatformDependent.MODEL_ROOT + "/active/swat/swat_10_5_ido.pm";
		String pmPath1 = PlatformDependent.MODEL_ROOT + "/active/swat/swat_10_5_rs.pm";
		String propPath = PlatformDependent.MODEL_ROOT + "/active/swat/swat_10_5_ido.pctl";
		
		List<Double> idoResults = new ArrayList<Double>();
		List<Double> rsResults = new ArrayList<Double>();
		
		for(int i=1; i<=38; i++){
			double reachp = PrismUtil.extractResultFromCommandOutput(ExternalCaller.executeCommand(new String[]{Config.PRISM_PATH
					, pmPath, propPath, "-prop", String.valueOf(i)}));
			double reachp1 = PrismUtil.extractResultFromCommandOutput(ExternalCaller.executeCommand(new String[]{Config.PRISM_PATH
					, pmPath1, propPath, "-prop", String.valueOf(i)}));
			System.out.println("ido result: " + reachp);
			System.out.println("rs result: " + reachp1);
			idoResults.add(reachp);
			rsResults.add(reachp1);
		}
		System.out.println("ido results: " + idoResults);
		System.out.println("rs results: " + rsResults);
		calculateDiffs();
	}
	
	public static void calculateDiffs(){
		double[] ar = new double[]{
				0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
				 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0027827632583496773, 0.0035205795901047028, 0.0, 0.0, 0.0, 0.002121588611859796, 0.002280919834279478, 0.006197673019836596, 0.03383628910692552, 0.01994106580932344, 0.0, 0.0, 0.0, 0.0025079207771222167, 0.0, 0.004435816717831056, 0.0, 0.004625740713269857, 0.0, 0.008187348280339906, 0.0, 0.006680057892477601, 0.04762740922064941, 0.053027601568470126, 0.04133351928217865, 0.0618582167170572, 0.06124660918914346, 0.0508190398345593, 0.06623316711039136, 0.06619672017604308, 0.022239309170918924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007061374409060215, 0.13568566571153876, 0.13331485285122732, 0.0, 0.0, 0.0, 0.0026336620550655083, 0.0, 0.005755321385760096, 0.1552091618115103, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0026166661106413994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011511196693996355, 0.10426735554590622, 0.12163110793957917, 0.12206157363406203, 0.1755291369346499, 0.0, 0.0, 0.0, 0.0012741815476190405, 0.0, 0.0, 0.21214011053955537, 0.21166885833643523, 0.0, 0.0, 0.0, 0.0, 0.07484878663919509, 0.16038490101754513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
				 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
		};
		double[] ir = new double[]{0.001953125, 0.001953125, 0.001953125, 0.0, 0.0, 0.001953125, 0.001953125, 0.003906249999999999, 0.004801432291666665, 0.0, 0.001953125, 0.001953125, 0.009114583333333322, 0.0068359374999999905, 0.001953125, 0.005927734374999979, 0.0, 0.0, 0.0039062499999999965, 0.001953125, 0.0039062499999999965, 0.0, 0.005859374999977324, 0.001953125, 0.001953125, 0.001953125, 0.0, 0.001953125, 0.0097656249995795, 
				0.0, 0.0, 0.010231769133596167, 0.001953125, 0.0058593749999999835, 0.0, 0.0, 0.0, 0.0061410757177202836
				
		};
		double[] rr = new double[]{0.001953125, 0.001953125, 0.001953125, 0.0, 0.0, 0.001953125, 0.003906249999999999, 0.003906249999999999, 
				0.004801432291666211, 0.0, 0.001953125, 0.001953125, 0.01009114583333331, 0.0078124999999999835, 0.00533995697462259, 0.005927734374992594, 
				0.0, 0.0, 0.004712802676160289, 0.001953125, 0.003906249999999994, 0.0, 
				0.0066659197037451335, 0.001953125, 0.001953125, 0.001953125, 0.0, 0.001953125, 0.009765624999999976, 0.0, 0.0,
				0.010658245828986671, 0.001953125, 0.009560496260538148, 0.0, 0.0, 0.005654246260538149, 0.008316440738643663
		};
		List<Double> arl = ListUtil.arrayToList(ar);
		List<Double> irl = ListUtil.arrayToList(ir);
		List<Double> rrl = ListUtil.arrayToList(rr);
		List<Double> narl = NumberUtil.nonZeroList(arl);
		List<Double> aid = ListUtil.listABSDiff(narl, irl);
		List<Double> rid = ListUtil.listABSDiff(narl, rrl);
		System.out.println("ido dif mean: " + ListUtil.listMean(aid));
		System.out.println("rs dif mean: " + ListUtil.listMean(rid));
	}

}
